#!/usr/bin/env bash

# Downloads a public stemcell for CPI into /var/vcap/store/stemcells/
#
# Required:
# * $MICRO_BOSH_STEMCELL_NAME - public stemcell name to be downloaded
#                             - if 'custom' the create stemcell from BOSH source
# * $MICRO_BOSH_STEMCELL_TYPE - what type of stemcell (ami vs tgz)
# * $PROVIDER - e.g. aws, openstack
#
# Optional:
# * $ISO_NAME - defaults to ubuntu-10.04.4-server-amd64.iso for creating stemcell

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

if [[ "${MICRO_BOSH_STEMCELL_NAME}X" == "X" ]]; then
  echo 'INTERNAL ERROR: Missing $MICRO_BOSH_STEMCELL_NAME environment variable'
  exit 1
fi

STEMCELLS_DIR=/var/vcap/store/stemcells
LAST_SUCCESSFUL_MICROBOSH_STEMCELL_URL=http://bosh-jenkins-artifacts.s3.amazonaws.com/last_successful_micro-bosh-stemcell-$PROVIDER.tgz

if [[ "${MICRO_BOSH_STEMCELL_NAME}" == "custom" ]]; then

  ISO_NAME=${ISO_NAME:-ubuntu-10.04.4-server-amd64.iso}

  echo "Creating custom stemcell..."

  cd ${STEMCELLS_DIR}
  if [[ ! -f ${ISO_NAME} ]]; then
    echo "Fetching base stemcell ISO to speed up stemcell creation..."
    wget http://releases.ubuntu.com/lucid/${ISO_NAME}
  fi
  export UBUNTU_ISO=${STEMCELLS_DIR}/${ISO_NAME}

  if [[ -d /var/tmp/bosh/ ]]; then
    echo "But first, cleaning out previous stemcell temporary files..."
    rm -rf /var/tmp/bosh
  fi

  BOSH_DIR=/var/vcap/store/repos/bosh
  cd $(dirname $BOSH_DIR)
  if [[ -d bosh ]]; then
    echo "Updating bosh source for agent/stemcell scripts"
    cd bosh
    git pull origin master
  else
    echo "Cloning bosh source for agent/stemcell scripts"
    git clone https://github.com/cloudfoundry/bosh.git
    cd bosh
  fi

  cd $BOSH_DIR
  echo "Creating custom stemcell..."
  rm -rf .bundle
  bundle install --deployment
  bundle exec rake stemcell:micro[$PROVIDER]

  echo "Copying to stemcells folder..."
  MICRO_BOSH_STEMCELL_PATH=$(ls -t /var/tmp/bosh/bosh_agent-*/work/work/*.tgz | sort | tail -n 1)
  sudo mv $MICRO_BOSH_STEMCELL_PATH $STEMCELLS_DIR
  sudo chown vcap:vcap -R $STEMCELLS_DIR
  MICRO_BOSH_STEMCELL_NAME=$(basename $MICRO_BOSH_STEMCELL_PATH)

elif [[ "${MICRO_BOSH_STEMCELL_TYPE}" == "edge-prebuilt" ]]; then
  cd $STEMCELLS_DIR
  echo Looking for latest microbosh stemcell at $LAST_SUCCESSFUL_MICROBOSH_STEMCELL_URL
  etag=$(curl -I $LAST_SUCCESSFUL_MICROBOSH_STEMCELL_URL 2>&1 | awk '/^ETag/ {print $2}' | sed -e 's/"//g')
  MICRO_BOSH_STEMCELL_NAME="micro_bosh-${etag}-latest.tgz"
  if [[ ! -f $MICRO_BOSH_STEMCELL_NAME ]]; then
    echo "Downloading latest microbosh stemcell, etag $etag..."
    curl -o $MICRO_BOSH_STEMCELL_NAME $LAST_SUCCESSFUL_MICROBOSH_STEMCELL_URL
  else
    echo "Latest microbosh stemcell with etag $etag already downloaded, skipping."
  fi

elif [[ "${MICRO_BOSH_STEMCELL_TYPE}" == "ami" ]]; then
  echo "Using AMI ${MICRO_BOSH_STEMCELL_NAME}, so there is nothing to download."
  
elif [[ -f $STEMCELLS_DIR/$MICRO_BOSH_STEMCELL_NAME ]]; then
  echo "Stemcell $(pwd)/$MICRO_BOSH_STEMCELL_NAME already exists."

else
  cd $STEMCELLS_DIR
  echo "Downloading public stemcell $MICRO_BOSH_STEMCELL_NAME"
  # set $COLUMNS manually else progressbar runs `tput cols`.to_i which causes grief
  COLUMNS=80 bosh -n download public stemcell $MICRO_BOSH_STEMCELL_NAME
fi

# print name of stemcell created/downloaded to be stored back in settings
echo $MICRO_BOSH_STEMCELL_NAME